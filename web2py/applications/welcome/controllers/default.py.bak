# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations
import urllib.request
import matplotlib.pyplot as plt

# -------------------------------------------------------------------------
# This is a sample controller
# - index is the default action of any application
# - user is required for authentication and authorization
# - download is for downloading files uploaded in the db (does streaming)
# -------------------------------------------------------------------------


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    return dict(message=T('Welcome to Safe Grain, Safe Food!'))


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()

def getGrainImage():
    # Call REST API on Raspberry Pi to capture image
    with urllib.request.urlopen("http://172.31.1.55:5000/captureImage") as url:
        data = url.read()
    # Creating copy on server
    imagefile = open('applications/welcome/static/images/GrainImage.jpg','wb')
    imagefile.write(data)
    imagefile.close()
    return redirect(URL('grainimage'))

def getGrainImageIPhone():
    # Call REST API on Raspberry Pi to capture image
    data = open('applications/welcome/static/images/contaminated1.jpg','rb').read()
    # Creating copy on server
    imagefile = open('applications/welcome/static/images/GrainImage.jpg','wb')
    imagefile.write(data)
    imagefile.close()
    return redirect(URL('grainimage'))

def grainimage():
    return dict(message=T('Image of grains have been captured!'))

def contaminationreport():
    # call service to start contamination detection
    from  getreport import testMyImage
    percOk = testMyImage('applications/welcome/static/images/GrainImage.jpg')
    

    # generate pie chart and save it
    labels = 'Good Grains', 'Contamination'
    sizes = [percOk, 100-percOk]
    explode = (0, 0.1)
    fig1, ax1 = plt.subplots()
    ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)
    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.savefig('applications/welcome/static/images/PieChart.png')
    return dict(message=T('Contamination details in the food grains are as below:'))

def viewanalysisimages():
    return dict(message=T(''))
